package com.whalez.reservationlive.ui.service_listimport android.annotation.SuppressLintimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.view.Viewimport androidx.lifecycle.*import androidx.recyclerview.widget.GridLayoutManagerimport androidx.recyclerview.widget.LinearLayoutManagerimport com.bumptech.glide.Glideimport com.whalez.reservationlive.Rimport com.whalez.reservationlive.data.api.ServiceDBClientimport com.whalez.reservationlive.data.api.ServiceDBInterfaceimport com.whalez.reservationlive.data.repository.NetworkStateimport com.whalez.reservationlive.data.repository.ServiceListRepositoryimport com.whalez.reservationlive.databinding.ActivityServiceListBindingimport com.whalez.reservationlive.ui.service_list.ServicePagedListAdapter.Companion.SERVICE_VIEW_TYPEimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchclass ServiceListActivity : AppCompatActivity() {    companion object {        const val SPAN_COUNT = 1        const val NO_NEED_CODE_IMG = -999    }    lateinit var codeName: String    private lateinit var viewModel: ServiceListViewModel    lateinit var servicePagedListRepository: ServiceListRepository    lateinit var serviceAdapter: ServicePagedListAdapter    private lateinit var binding: ActivityServiceListBinding    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding = ActivityServiceListBinding.inflate(layoutInflater)        setContentView(binding.root)        codeName = intent.getStringExtra("codeName")!!        setCodeImageAndName()        binding.btnBack.setOnClickListener { finish() }        binding.rvArea.apply {            adapter = AreaAdapter(context, codeName)            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)        }        val apiService: ServiceDBInterface = ServiceDBClient.getClient()        servicePagedListRepository =            ServiceListRepository(                apiService            )        viewModel = getViewModel(codeName)        serviceAdapter = ServicePagedListAdapter(this)        val gridLayoutManager = GridLayoutManager(this, SPAN_COUNT)        gridLayoutManager.spanSizeLookup = object : GridLayoutManager.SpanSizeLookup() {            override fun getSpanSize(position: Int): Int {                val viewType = serviceAdapter.getItemViewType(position)                return if (viewType == SERVICE_VIEW_TYPE) 1                else SPAN_COUNT            }        }        binding.rvServiceList.apply {            layoutManager = gridLayoutManager            setHasFixedSize(true)            adapter = serviceAdapter        }        viewModel.servicePagedList.observe(this, {            lifecycleScope.launch(Dispatchers.IO) {                serviceAdapter.submitData(it)            }        })        viewModel.networkState.observe(this, {            binding.progressBar.visibility =                if (viewModel.listIsEmpty() && it == NetworkState.LOADING) View.VISIBLE                else View.GONE            binding.tvError.visibility =                if (viewModel.listIsEmpty() && it == NetworkState.ERROR) View.VISIBLE                else View.GONE            if(!viewModel.listIsEmpty()) {                serviceAdapter.setNetworkState(it)            }        })    }    private fun getViewModel(codeName: String): ServiceListViewModel {        return ViewModelProvider(this, object : ViewModelProvider.Factory {            override fun <T : ViewModel?> create(modelClass: Class<T>): T {                @Suppress("UNCHECKED_CAST")                return ServiceListViewModel(servicePagedListRepository, codeName) as T            }        })[ServiceListViewModel::class.java]    }    @SuppressLint("SetTextI18n")    private fun setCodeImageAndName(){        binding.tvCodeName.text = " $codeName"        val codeIcon: Int        val codeImage: Int        when(codeName){            "축구" -> {                codeIcon = R.drawable.ic_football_white                codeImage = R.drawable.soccer_logo            }            "풋살" -> {                codeIcon = R.drawable.ic_futsal_white                codeImage = R.drawable.futsal_logo            }            "야구" -> {                codeIcon = R.drawable.ic_baseball_white                codeImage = R.drawable.baseball_logo            }            "농구" -> {                codeIcon = R.drawable.ic_basketball_white                codeImage = R.drawable.basketball_logo            }            "테니스" -> {                codeIcon = R.drawable.ic_tennis_white                codeImage = R.drawable.tennis_logo            }            "배드민턴" -> {                codeIcon = R.drawable.ic_badminton_white                codeImage = R.drawable.badminton_logo            }            "배구" -> {                codeIcon = R.drawable.ic_volleyball_white                codeImage = R.drawable.volleyball_logo            }            "다목적경기장" -> {                codeIcon = R.drawable.ic_multipurpose_white                codeImage = R.drawable.multipurpose_logo            }            "족구" -> {                codeIcon = R.drawable.ic_jokgu_white                codeImage = R.drawable.jokgu_logo            }            "전체" -> {                codeName = ""                codeIcon = NO_NEED_CODE_IMG                codeImage = R.drawable.only_players            }            else -> {                codeIcon = NO_NEED_CODE_IMG                codeImage = R.drawable.only_players            }        }        if(codeIcon != NO_NEED_CODE_IMG) binding.tvCodeName.setCompoundDrawablesWithIntrinsicBounds(codeIcon, 0, 0, 0)        Glide.with(this.applicationContext)            .load(codeImage)            .placeholder(R.drawable.placeholder)            .into(binding.ivSportImg)    }}